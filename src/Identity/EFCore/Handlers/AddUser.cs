using Nova.Identity.Security;
using Nova.Identity.Utilities;

namespace Nova.Identity.Handlers;

sealed class AddUserHandler : IRequestHandler<AddUserCommand>
{
    readonly IDbContextFactory<IdentityDbContext> _contextFactory;
    readonly IUserPasswordHashAlgo _passwordHashAlgo;
    readonly ICurrentAuditInfoProvider _auditInfoProvider;
    readonly IMediator _mediator;
    readonly IUserPasswordGenerator _passwordGenerator;
    readonly UserEmailAddressStatusesOptions _emailAddressStatuses;
    readonly UserAutoGeneratedPasswordEncryptor _autoGeneratedPasswordEncryptor;

    public AddUserHandler(IDbContextFactory<IdentityDbContext> contextFactory, IUserPasswordHashAlgo passwordHashAlgo, ICurrentAuditInfoProvider auditInfoProvider, IMediator mediator, IUserPasswordGenerator passwordGenerator, IOptions<UserEmailAddressStatusesOptions> emailAddressStatuses, UserAutoGeneratedPasswordEncryptor autoGeneratedPasswordEncryptor)
    {
        _contextFactory = contextFactory;
        _passwordHashAlgo = passwordHashAlgo;
        _auditInfoProvider = auditInfoProvider;
        _mediator = mediator;
        _passwordGenerator = passwordGenerator;
        _emailAddressStatuses = emailAddressStatuses.Value;
        _autoGeneratedPasswordEncryptor = autoGeneratedPasswordEncryptor;
    }

    public async Task<IResponse> Handle(AddUserCommand request, CancellationToken cancellationToken)
    {
        using var context = await _contextFactory.CreateDbContextAsync(cancellationToken);
        using var transaction = await context.Database.BeginTransactionAsync(cancellationToken);

        if (await DoesUsernameExists(context, request.Username, cancellationToken))
        {
            return new UsernameAlreadyExistsResponse { Username = request.Username };
        }

        if (await DoesEmailAddressExists(context, request.EmailAddress, cancellationToken))
        {
            return new UserEmailAddressAlreadyExistsResponse { EmailAddress = request.EmailAddress };
        }

        var auditInfo = _auditInfoProvider.Current;
        var autoGeneratedPassword = TryGenerateRandomPassword(request.Password);
        var password = _passwordHashAlgo.Compute(autoGeneratedPassword);
        var user = request.Adapt<AddUserCommand, User>() with 
        {
            HashedPassword = password.HashedPassword,
            PasswordSalt = password.Salt,
            IsDeleted = false,
            InsertedById = auditInfo.UserId,
            InsertedOn = auditInfo.Timestamp
        };
        context.Users.Add(user);
        await context.SaveChangesAsync(cancellationToken);

        var userEmailAddress = new UserEmailAddress
        {
            UserId = user.Id,
            EmailAddress = request.EmailAddress,
            IsPrimary = true,
            StatusId = _emailAddressStatuses.Pending,
            IsDeleted = false,
            InsertedById = auditInfo.UserId,
            InsertedOn = auditInfo.Timestamp
        };
        context.UserEmailAddresses.Add(userEmailAddress);
        await context.SaveChangesAsync(cancellationToken);

        await transaction.CommitAsync(cancellationToken);
        await _mediator.Publish(user.Adapt<User, UserAddedEvent>() with 
        {
            CipherPassword = request.Password is null ? _autoGeneratedPasswordEncryptor.Encrypt(autoGeneratedPassword) : null
        }, cancellationToken);
        await _mediator.Publish(userEmailAddress.Adapt<UserEmailAddress, UserEmailAddressAddedEvent>());

        return new AddUserCommand.Response { Id = user.Id };
    }

    async Task<bool> DoesUsernameExists(IdentityDbContext context, string username, CancellationToken cancellationToken)
    {
        return await context.Users.AsNoTracking()
            .Where(_ => _.Username == username && !_.IsDeleted)
            .AnyAsync(cancellationToken);
    }

    async Task<bool> DoesEmailAddressExists(IdentityDbContext context, string emailAddress, CancellationToken cancellationToken)
    {
        return await context.UserEmailAddresses.AsNoTracking()
            .Where(_ => _.EmailAddress == emailAddress && !_.IsDeleted)
            .AnyAsync();
    }

    string TryGenerateRandomPassword(string? requestPassword)
    {
        if (!string.IsNullOrWhiteSpace(requestPassword))
            return requestPassword;

        return _passwordGenerator.Generate();
    }
}
