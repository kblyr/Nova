using Nova.Identity.Security;

namespace Nova.Identity.Handlers;

sealed class SendUserCreationConfirmationMailRequestedHandler : INotificationHandler<SendUserCreationConfirmationMailRequestedEvent>
{
    readonly UserCreationConfirmationTemplateLoader _templateLoader;
    readonly UserCreationConfirmationSender _sender;
    readonly IMediator _mediator;
    readonly UserAutoGeneratedPasswordDecryptor _autoGeneratedPasswordDecryptor;

    public SendUserCreationConfirmationMailRequestedHandler(UserCreationConfirmationTemplateLoader templateLoader, UserCreationConfirmationSender sender, IMediator mediator, UserAutoGeneratedPasswordDecryptor autoGeneratedPasswordDecryptor)
    {
        _templateLoader = templateLoader;
        _sender = sender;
        _mediator = mediator;
        _autoGeneratedPasswordDecryptor = autoGeneratedPasswordDecryptor;
    }

    public async Task Handle(SendUserCreationConfirmationMailRequestedEvent notification, CancellationToken cancellationToken)
    {
        try
        {
            var template = await _templateLoader.Load(cancellationToken);
            var body = await template.RenderAsync(new { Password = notification.CipherPassword is null ? null : _autoGeneratedPasswordDecryptor.Decrypt(notification.CipherPassword) });
            await _sender.Send(MailboxAddress.Parse(notification.EmailAddress), body, cancellationToken);
            await _mediator.Send(notification.Adapt<SendUserCreationConfirmationMailRequestedEvent, UserCreationConfirmationMailSentEvent>(), cancellationToken);
        }
        catch (Exception)
        {
            await _mediator.Send(notification.Adapt<SendUserCreationConfirmationMailRequestedEvent, SendUserCreationConfirmationMailFailedEvent>(), cancellationToken);
        }
    }
}
